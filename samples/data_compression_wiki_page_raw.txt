{{short description|Compact encoding of digital data}}
{{redirect|Source coding|the term in computer programming|Source code}}
{{Use American English|date=March 2021}}

In [[information theory]], '''data compression''', '''source coding''',<ref name="Wade"/> or '''bit-rate reduction''' is the process of encoding [[information]] using fewer [[bit]]s than the original representation.<ref name="mahdi53"/> Any particular compression is either [[Lossy compression|lossy]] or [[Lossless compression|lossless]]. Lossless compression reduces bits by identifying and eliminating [[Redundancy (information theory)|statistical redundancy]]. No information is lost in lossless compression. Lossy compression reduces bits by removing unnecessary or less important information.<ref name="PujarKadlaskar"/> Typically, a device that performs data compression is referred to as an encoder, and one that performs the reversal of the process (decompression) as a decoder.

The process of reducing the size of a [[data file]] is often referred to as data compression. In the context of [[data transmission]], it is called source coding: encoding is done at the source of the data before it is stored or transmitted.<ref name="Salomon"/> Source coding should not be confused with [[Error correction code|channel coding]], for error detection and correction or [[line coding]], the means for mapping data onto a signal.

Data Compression algorithms present a [[Space–time tradeoff|space-time complexity trade-off]] between the bytes needed to store or transmit information, and the [[Computational resource]]s needed to perform the encoding and decoding. The design of data compression schemes involves balancing the degree of compression, the amount of distortion introduced (when using [[lossy data compression]]), and the computational resources or time required to compress and decompress the data.<ref name="Tank"/>

== Lossless ==
{{Main|Lossless compression}}

[[Lossless data compression]] [[algorithm]]s usually exploit [[Redundancy (information theory)|statistical redundancy]] to represent data without losing any [[Self-information|information]], so that the process is reversible. Lossless compression is possible because most real-world data exhibits statistical redundancy. For example, an image may have areas of color that do not change over several pixels; instead of coding "red pixel, red pixel, ..." the data may be encoded as "279 red pixels". This is a basic example of [[run-length encoding]]; there are many schemes to reduce file size by eliminating redundancy.

The [[Lempel–Ziv]] (LZ) compression methods are among the most popular algorithms for lossless storage.<ref name="Optimized LZW"/>  [[DEFLATE]] is a variation on LZ optimized for decompression speed and compression ratio, but compression can be slow. In the mid-1980s, following work by [[Terry Welch]], the [[Lempel–Ziv–Welch]] (LZW) algorithm rapidly became the method of choice for most general-purpose compression systems. LZW is used in [[Graphics Interchange Format|GIF]] images, programs such as [[PKZIP]], and hardware devices such as modems.<ref>{{Cite book|last=Stephen|first=Wolfram|url=https://www.wolframscience.com/nks/p1069--data-compression/|title=New Kind of Science|year=2002|isbn=1-57955-008-8|location=Champaign, IL|pages=1069}}</ref> LZ methods use a table-based compression model where table entries are substituted for repeated strings of data. For most LZ methods, this table is generated dynamically from earlier data in the input. The table itself is often [[Huffman coding|Huffman encoded]]. [[Grammar-based codes]] like this can compress highly repetitive input extremely effectively, for instance, a biological [[data collection]] of the same or closely related species, a huge versioned document collection, internet archival, etc. The basic task of grammar-based codes is constructing a context-free grammar deriving a single string. Other practical grammar compression algorithms include [[Sequitur algorithm|Sequitur]] and [[Re-Pair]].

The strongest modern lossless compressors use [[Randomized algorithm|probabilistic]] models, such as [[prediction by partial matching]]. The [[Burrows–Wheeler transform]] can also be viewed as an indirect form of statistical modelling.<ref name="mahmud2"/> In a further refinement of the direct use of [[probabilistic model]]ling, statistical estimates can be coupled to an algorithm called [[arithmetic coding]]. Arithmetic coding is a more modern coding technique that uses the mathematical calculations of a [[finite-state machine]] to produce a string of encoded bits from a series of input data symbols. It can achieve superior compression compared to other techniques such as the better-known Huffman algorithm. It uses an internal memory state to avoid the need to perform a one-to-one mapping of individual input symbols to distinct representations that use an integer number of bits, and it clears out the internal memory only after encoding the entire string of data symbols. Arithmetic coding applies especially well to adaptive data compression tasks where the statistics vary and are context-dependent, as it can be easily coupled with an adaptive model of the [[probability distribution]] of the input data. An early example of the use of arithmetic coding was in an optional (but not widely used) feature of the [[JPEG]] image coding standard.<ref name=TomLane/> It has since been applied in various other designs including [[H.263]], [[H.264/MPEG-4 AVC]] and [[HEVC]] for video coding.<ref name="HEVC"/>

Archive software typically has the ability to adjust the "dictionary size", where a larger size demands more [[random-access memory]] during compression and decompression, but compresses stronger, especially on repeating patterns in files' content.<ref>{{cite web| url = https://www.winrar-france.fr/winrar_instructions_for_use/source/html/HELPArcOptimal.htm| title = How to choose optimal archiving settings – WinRAR}}</ref><ref>{{cite web| url = https://sevenzip.osdn.jp/chm/cmdline/switches/method.htm| title = (Set compression Method) switch – 7zip| access-date = 2021-11-07| archive-date = 2022-04-09| archive-url = https://web.archive.org/web/20220409225619/https://sevenzip.osdn.jp/chm/cmdline/switches/method.htm| url-status = dead}}</ref>

== Lossy ==
{{Main|Lossy compression}}

[[File:MP3 compression.jpg|thumb|[[MP3]], an example of a lossy file format compared to [[WAV]].]]
In the late 1980s, digital images became more common, and standards for lossless [[image compression]] emerged. In the early 1990s, lossy compression methods began to be widely used.<ref name="Wolfram"/> In these schemes, some loss of information is accepted as dropping nonessential detail can save storage space. There is a corresponding [[trade-off]] between preserving information and reducing size. Lossy data compression schemes are designed by research on how people perceive the data in question. For example, the human eye is more sensitive to subtle variations in [[luminance]] than it is to the variations in color. JPEG image compression works in part by rounding off nonessential bits of information.<ref name="Arcangel"/>  A number of popular compression formats exploit these perceptual differences, including [[psychoacoustics]] for sound, and [[psychovisual]]s for images and video.

Most forms of lossy compression are based on [[transform coding]], especially the [[discrete cosine transform]] (DCT). It was first proposed in 1972 by [[N. Ahmed|Nasir Ahmed]], who then developed a working algorithm with T. Natarajan and [[K. R. Rao]] in 1973, before introducing it in January 1974.<ref name="Ahmed">{{cite journal |last=Ahmed |first=Nasir |author-link=N. Ahmed |title=How I Came Up With the Discrete Cosine Transform |journal=[[Digital Signal Processing (journal)|Digital Signal Processing]] |date=January 1991 |volume=1 |issue=1 |pages=4–5 |doi=10.1016/1051-2004(91)90086-Z |bibcode=1991DSP.....1....4A |url=https://www.scribd.com/doc/52879771/DCT-History-How-I-Came-Up-with-the-Discrete-Cosine-Transform}}</ref><ref name="DCT"/> DCT is the most widely used lossy compression method, and is used in multimedia formats for images (such as JPEG and [[HEIF]]),<ref name="JPEG"/> [[Video compression|video]] (such as [[MPEG]], [[H.264/AVC|AVC]] and HEVC) and audio (such as [[MP3]], [[Advanced Audio Coding|AAC]] and [[Vorbis]]).

Lossy image compression is used in [[digital camera]]s, to increase storage capacities. Similarly, [[DVD]]s, [[Blu-ray]] and [[streaming video]] use lossy [[video coding format]]s. Lossy compression is extensively used in video.

In lossy audio compression, methods of psychoacoustics are used to remove non-audible (or less audible) components of the [[audio signal]]. Compression of human speech is often performed with even more specialized techniques; [[speech coding]] is distinguished as a separate discipline from general-purpose audio compression. Speech coding is used in [[internet telephony]], for example, audio compression is used for CD ripping and is decoded by the audio players.<ref name="mahmud2"/>

Lossy compression can cause [[generation loss]].

== Theory ==
The theoretical basis for compression is provided by [[information theory]] and, more specifically, [[Shannon's source coding theorem]]; domain-specific theories include [[algorithmic information theory]] for lossless compression and [[rate–distortion theory]] for lossy compression. These areas of study were essentially created by [[Claude Shannon]], who published fundamental papers on the topic in the late 1940s and early 1950s. Other topics associated with compression include [[coding theory]] and [[statistical inference]].<ref name="Marak"/>

=== Machine learning ===
There is a close connection between [[machine learning]] and compression. A system that predicts the [[posterior probabilities]] of a sequence given its entire history can be used for optimal data compression (by using [[arithmetic coding]] on the output distribution). Conversely, an optimal compressor can be used for prediction (by finding the symbol that compresses best, given the previous history). This equivalence has been used as a justification for using data compression as a benchmark for "general intelligence".<ref name="Mahoney"/><ref name="Market Efficiency"/><ref name="Ben-Gal"/>

An alternative view can show compression algorithms implicitly map strings into implicit [[feature space vector]]s, and compression-based similarity measures compute similarity within these feature spaces. For each compressor C(.) we define an associated vector space ℵ, such that C(.) maps an input string x, corresponding to the vector norm ||~x||. An exhaustive examination of the feature spaces underlying all compression algorithms is precluded by space; instead, feature vectors chooses to examine three representative lossless compression methods, LZW, LZ77, and PPM.<ref name="ScullyBrodley"/>

According to [[AIXI]] theory, a connection more directly explained in [[Hutter Prize]], the best possible compression of x is the smallest possible software that generates x. For example, in that model, a zip file's compressed size includes both the zip file and the unzipping software, since you can not unzip it without both, but there may be an even smaller combined form.

Examples of AI-powered audio/video compression software include [[NVIDIA Maxine]], AIVC.<ref>{{cite web |author1=Gary Adcock |title=What Is AI Video Compression? |url=https://massive.io/file-transfer/what-is-ai-video-compression/ |website=massive.io |access-date=6 April 2023 |date=January 5, 2023}}</ref> Examples of software that can perform AI-powered image compression include [[OpenCV]], [[TensorFlow]], [[MATLAB]]'s Image Processing Toolbox (IPT) and High-Fidelity Generative Image Compression.<ref>{{cite arXiv |last1=Mentzer |first1=Fabian |last2=Toderici |first2=George |last3=Tschannen |first3=Michael |last4=Agustsson |first4=Eirikur |title=High-Fidelity Generative Image Compression |year=2020 |class=eess.IV |eprint=2006.09965}}</ref>

In [[unsupervised machine learning]], [[k-means clustering]] can be utilized to compress data by grouping similar data points into clusters. This technique simplifies handling extensive datasets that lack predefined labels and finds widespread use in fields such as [[image compression]].<ref>{{Cite web |title=What is Unsupervised Learning? {{!}} IBM |url=https://www.ibm.com/topics/unsupervised-learning |access-date=2024-02-05 |website=www.ibm.com |date=23 September 2021 |language=en-us}}</ref>

Data compression aims to reduce the size of data files, enhancing storage efficiency and speeding up data transmission. K-means clustering, an unsupervised machine learning algorithm, is employed to partition a dataset into a specified number of clusters, k, each represented by the [[centroid]] of its points. This process condenses extensive datasets into a more compact set of representative points. Particularly beneficial in [[Image processing|image]] and [[signal processing]], k-means clustering aids in data reduction by replacing groups of data points with their centroids, thereby preserving the core information of the original data while significantly decreasing the required storage space.<ref>{{Cite web |date=2023-05-25 |title=Differentially private clustering for large-scale datasets |url=https://blog.research.google/2023/05/differentially-private-clustering-for.html |access-date=2024-03-16 |website=blog.research.google |language=en}}</ref>

[[Large language model]]s (LLMs) are also capable of lossless data compression, as demonstrated by [[DeepMind]]'s research with the Chinchilla 70B model. Developed by DeepMind, Chinchilla 70B effectively compressed data, outperforming conventional methods such as [[Portable Network Graphics]] (PNG) for images and [[Free Lossless Audio Codec]] (FLAC) for audio. It achieved compression of image and audio data to 43.4% and 16.4% of their original sizes, respectively.<ref>{{Cite web |last=Edwards |first=Benj |date=2023-09-28 |title=AI language models can exceed PNG and FLAC in lossless compression, says study |url=https://arstechnica.com/information-technology/2023/09/ai-language-models-can-exceed-png-and-flac-in-lossless-compression-says-study/ |access-date=2024-03-07 |website=Ars Technica |language=en-us}}</ref>

=== Data differencing ===
[[File:Nubio Diff Screenshot3.png|thumb|[[File comparison|Comparison]] of two revisions of a file]]
{{unreferenced section|date=July 2024}}
Data compression can be viewed as a special case of [[data differencing]].<ref name="RFC 3284"/><ref name="Vdelta"/> Data differencing consists of producing a ''difference'' given a ''source'' and a ''target,'' with patching reproducing the ''target'' given a ''source'' and a ''difference.'' Since there is no separate source and target in data compression, one can consider data compression as data differencing with empty source data, the compressed file corresponding to a difference from nothing. This is the same as considering absolute [[entropy (information theory)|entropy]] (corresponding to data compression) as a special case of [[relative entropy]] (corresponding to data differencing) with no initial data.

The term ''differential compression'' is used to emphasize the data differencing connection.

== Uses ==
=== Image ===
{{Main|Image compression}}

[[Entropy coding]] originated in the 1940s with the introduction of [[Shannon–Fano coding]],<ref name="Shannon"/> the basis for [[Huffman coding]] which was developed in 1950.<ref name="Huffman"/> [[Transform coding]] dates back to the late 1960s, with the introduction of [[fast Fourier transform]] (FFT) coding in 1968 and the [[Hadamard transform]] in 1969.<ref name="Hadamard"/>

An important image compression technique is the [[discrete cosine transform]] (DCT), a technique developed in the early 1970s.<ref name="Ahmed"/> DCT is the basis for JPEG, a [[lossy compression]] format which was introduced by the [[Joint Photographic Experts Group]] (JPEG) in 1992.<ref name="t81" /> JPEG greatly reduces the amount of data required to represent an image at the cost of a relatively small reduction in image quality and has become the most widely used [[image file format]].<ref>{{cite web |title=The JPEG image format explained |url=https://home.bt.com/tech-gadgets/photography/what-is-a-jpeg-11364206889349 |website=[[BT.com]] |publisher=[[BT Group]] |access-date=5 August 2019 |date=31 May 2018 |archive-date=5 August 2019 |archive-url=https://web.archive.org/web/20190805194553/https://home.bt.com/tech-gadgets/photography/what-is-a-jpeg-11364206889349 |url-status=dead }}</ref><ref>{{cite news |last1=Baraniuk |first1=Chris |title=Copy protections could come to JPEGs |url=https://www.bbc.co.uk/news/technology-34538705 |access-date=13 September 2019 |work=[[BBC News]] |agency=[[BBC]] |date=15 October 2015}}</ref> Its highly efficient DCT-based compression algorithm was largely responsible for the wide proliferation of [[digital image]]s and [[digital photo]]s.<ref name="Atlantic">{{cite web |title=What Is a JPEG? The Invisible Object You See Every Day |url=https://www.theatlantic.com/technology/archive/2013/09/what-is-a-jpeg-the-invisible-object-you-see-every-day/279954/ |access-date=13 September 2019 |website=[[The Atlantic]] |date=24 September 2013}}</ref>

[[Lempel–Ziv–Welch]] (LZW) is a [[lossless compression]] algorithm developed in 1984. It is used in the [[GIF]] format, introduced in 1987.<ref name="cloanto">{{cite web|url=https://mike.pub/19950127-gif-lzw|title=The GIF Controversy: A Software Developer's Perspective|date=27 January 1995 |access-date=26 May 2015}}</ref> [[DEFLATE]], a lossless compression algorithm specified in 1996, is used in the [[Portable Network Graphics]] (PNG) format.<ref name="IETF">{{cite IETF |title=DEFLATE Compressed Data Format Specification version 1.3 |rfc=1951 |section=Abstract |page=1 |author=L. Peter Deutsch |author-link=L. Peter Deutsch |date=May 1996 |publisher=[[Internet Engineering Task Force|IETF]] |access-date=2014-04-23}}</ref>

[[Wavelet compression]], the use of [[wavelet]]s in image compression, began after the development of DCT coding.<ref name="Hoffman"/> The [[JPEG 2000]] standard was introduced in 2000.<ref>{{cite book |last1=Taubman |first1=David |last2=Marcellin |first2=Michael |title=JPEG2000 Image Compression Fundamentals, Standards and Practice: Image Compression Fundamentals, Standards and Practice |date=2012 |publisher=[[Springer Science & Business Media]] |isbn=9781461507994 |url=https://books.google.com/books?id=y7HeBwAAQBAJ&pg=PA402}}</ref> In contrast to the DCT algorithm used by the original JPEG format, JPEG 2000 instead uses [[discrete wavelet transform]] (DWT) algorithms.<ref name="Unser"/><ref>{{cite web |last1=Sullivan |first1=Gary |title=General characteristics and design considerations for temporal subband video coding |publisher=[[Video Coding Experts Group]] |website=[[ITU-T]] |date=8–12 December 2003 |url=https://www.itu.int/wftp3/av-arch/video-site/0312_Wai/VCEG-U06.doc |access-date=13 September 2019}}</ref><ref>{{cite book |last1=Bovik |first1=Alan C. |title=The Essential Guide to Video Processing |date=2009 |publisher=[[Academic Press]] |isbn=9780080922508 |page=355 |url=https://books.google.com/books?id=wXmSPPB_c_0C&pg=PA355}}</ref> JPEG 2000 technology, which includes the [[Motion JPEG 2000]] extension, was selected as the [[video coding standard]] for [[digital cinema]] in 2004.<ref>{{cite book |last1=Swartz |first1=Charles S. |title=Understanding Digital Cinema: A Professional Handbook |date=2005 |publisher=[[Taylor & Francis]] |isbn=9780240806174 |page=147 |url=https://books.google.com/books?id=tYw3ehoBnjkC&pg=PA147}}</ref>

=== Audio ===
{{see also|Audio coding format|Audio codec}}
Audio data compression, not to be confused with [[dynamic range compression]], has the potential to reduce the transmission [[Bandwidth (computing)|bandwidth]] and storage requirements of audio data. [[List of codecs#Audio compression formats|Audio compression formats compression algorithms]] are implemented in [[software]] as audio [[codec]]s. In both lossy and lossless compression, [[Redundancy (information theory)|information redundancy]] is reduced, using methods such as [[Coding theory|coding]], [[Quantization (signal processing)|quantization]], DCT and [[linear prediction]] to reduce the amount of information used to represent the uncompressed data.

Lossy audio compression algorithms provide higher compression and are used in numerous audio applications including [[Vorbis]] and [[MP3]]. These algorithms almost all rely on [[psychoacoustics]] to eliminate or reduce fidelity of less audible sounds, thereby reducing the space required to store or transmit them.<ref name="mahdi53"/><ref>{{cite journal |last1=Cunningham |first1=Stuart |last2=McGregor |first2=Iain |title=Subjective Evaluation of Music Compressed with the ACER Codec Compared to AAC, MP3, and Uncompressed PCM |journal=International Journal of Digital Multimedia Broadcasting |volume=2019 |pages=1–16 |date=2019 |language=en|doi=10.1155/2019/8265301 |doi-access=free }}</ref>

The acceptable trade-off between loss of audio quality and transmission or storage size depends upon the application. For example, one 640 MB [[compact disc]] (CD) holds approximately one hour of uncompressed [[high fidelity]] music, less than 2 hours of music compressed losslessly, or 7 hours of music compressed in the [[MP3]] format at a medium [[bit rate]]. A digital sound recorder can typically store around 200 hours of clearly intelligible speech in 640 MB.<ref name="Olympus WS-120"/>

Lossless audio compression produces a representation of digital data that can be decoded to an exact digital duplicate of the original. Compression ratios are around 50–60% of the original size,<ref name="FLAC comparison"/> which is similar to those for generic lossless data compression. Lossless codecs use [[curve fitting]] or linear prediction as a basis for estimating the signal. Parameters describing the estimation and the difference between the estimation and the actual signal are coded separately.<ref name="FLAC overview"/>

A number of lossless audio compression formats exist. See [[List of codecs#Lossless compression|list of lossless codecs]] for a listing. Some formats are associated with a distinct system, such as [[Direct Stream Transfer]], used in [[Super Audio CD]] and [[Meridian Lossless Packing]], used in [[DVD-Audio]], [[Dolby TrueHD]], [[Blu-ray]] and [[HD DVD]].

Some [[audio file format]]s feature a combination of a lossy format and a lossless correction; this allows stripping the correction to easily obtain a lossy file. Such formats include [[MPEG-4 SLS]] (Scalable to Lossless), [[WavPack]], and [[OptimFROG DualStream]].

When audio files are to be processed, either by further compression or for [[Audio editing|editing]], it is desirable to work from an unchanged original (uncompressed or losslessly compressed). Processing of a lossily compressed file for some purpose usually produces a final result inferior to the creation of the same compressed file from an uncompressed original. In addition to sound editing or mixing, lossless audio compression is often used for archival storage, or as master copies.

==== Lossy audio compression ====
[[File:AudiodatenkompressionManowarThePowerOfThySword.jpg|thumb|Comparison of [[spectrogram]]s of audio in an uncompressed format and several lossy formats. The lossy spectrograms show [[bandlimiting]] of higher frequencies, a common technique associated with lossy audio compression.]]

Lossy audio compression is used in a wide range of applications. In addition to standalone audio-only applications of file playback in MP3 players or computers, digitally compressed audio streams are used in most video DVDs, digital television, streaming media on the [[Internet]], satellite and cable radio, and increasingly in terrestrial radio broadcasts. Lossy compression typically achieves far greater compression than lossless compression, by discarding less-critical data based on [[psychoacoustic]] optimizations.<ref name="Jaiswal"/>

Psychoacoustics recognizes that not all data in an audio stream can be perceived by the human [[auditory system]]. Most lossy compression reduces redundancy by first identifying perceptually irrelevant sounds, that is, sounds that are very hard to hear. Typical examples include high frequencies or sounds that occur at the same time as louder sounds. Those irrelevant sounds are coded with decreased accuracy or not at all.

Due to the nature of lossy algorithms, [[audio quality]] suffers a [[digital generation loss]] when a file is decompressed and recompressed. This makes lossy compression unsuitable for storing the intermediate results in professional audio engineering applications, such as sound editing and multitrack recording. However, lossy formats such as [[MP3]] are very popular with end-users as the file size is reduced to 5-20% of the original size and a megabyte can store about a minute's worth of music at adequate quality.

Several proprietary lossy compression algorithms have been developed that provide higher quality audio performance by using a combination of lossless and lossy algorithms with adaptive bit rates and lower compression ratios. Examples include [[aptX]], [[LDAC (codec)|LDAC]], [[LHDC (codec)|LHDC]], [[Master Quality Authenticated#Codec description|MQA]] and [[SCL6 (codec)|SCL6]].

===== Coding methods =====
To determine what information in an audio signal is perceptually irrelevant, most lossy compression algorithms use transforms such as the [[modified discrete cosine transform]] (MDCT) to convert [[time domain]] sampled waveforms into a transform domain, typically the [[frequency domain]]. Once transformed, component frequencies can be prioritized according to how audible they are. Audibility of spectral components is assessed using the [[absolute threshold of hearing]] and the principles of [[simultaneous masking]]—the phenomenon wherein a signal is masked by another signal separated by frequency—and, in some cases, [[temporal masking]]—where a signal is masked by another signal separated by time. [[Equal-loudness contour]]s may also be used to weigh the perceptual importance of components. Models of the human ear-brain combination incorporating such effects are often called [[psychoacoustic model]]s.<ref name="faxin47"/>

Other types of lossy compressors, such as the [[linear predictive coding]] (LPC) used with speech, are source-based coders. LPC uses a model of the human vocal tract to analyze speech sounds and infer the parameters used by the model to produce them moment to moment. These changing parameters are transmitted or stored and used to drive another model in the decoder which reproduces the sound.

Lossy formats are often used for the distribution of streaming audio or interactive communication (such as in cell phone networks). In such applications, the data must be decompressed as the data flows, rather than after the entire data stream has been transmitted. Not all audio codecs can be used for streaming applications.<ref name="Jaiswal"/>

[[Latency (engineering)|Latency]] is introduced by the methods used to encode and decode the data. Some codecs will analyze a longer segment, called a ''frame'', of the data to optimize efficiency, and then code it in a manner that requires a larger segment of data at one time to decode. The inherent latency of the coding algorithm can be critical; for example, when there is a two-way transmission of data, such as with a telephone conversation, significant delays may seriously degrade the perceived quality.

In contrast to the speed of compression, which is proportional to the number of operations required by the algorithm, here latency refers to the number of samples that must be analyzed before a block of audio is processed. In the minimum case, latency is zero samples (e.g., if the coder/decoder simply reduces the number of bits used to quantize the signal). Time domain algorithms such as LPC also often have low latencies, hence their popularity in speech coding for telephony. In algorithms such as MP3, however, a large number of samples have to be analyzed to implement a psychoacoustic model in the frequency domain, and latency is on the order of 23&nbsp;ms.

===== Speech encoding =====
[[Speech encoding]] is an important category of audio data compression. The perceptual models used to estimate what aspects of speech a human ear can hear are generally somewhat different from those used for music. The range of frequencies needed to convey the sounds of a human voice is normally far narrower than that needed for music, and the sound is normally less complex. As a result, speech can be encoded at high quality using a relatively low bit rate.

This is accomplished, in general, by some combination of two approaches:
* Only encoding sounds that could be made by a single human voice.
* Throwing away more of the data in the signal—keeping just enough to reconstruct an "intelligible" voice rather than the full frequency range of human [[hearing (sense)|hearing]].

The earliest algorithms used in speech encoding (and audio data compression in general) were the [[A-law algorithm]] and the [[μ-law algorithm]].

==== History ====
[[File:Placa-audioPC-925.jpg|right|thumb|Solidyne 922: The world's first commercial audio bit compression [[sound card]] for PC, 1990]]

Early audio research was conducted at [[Bell Labs]]. There, in 1950, [[C. Chapin Cutler]] filed the patent on [[differential pulse-code modulation]] (DPCM).<ref name="DPCM"/> In 1973, [[Adaptive DPCM]] (ADPCM) was introduced by P. Cummiskey, [[Nikil Jayant|Nikil S. Jayant]] and [[James L. Flanagan]].<ref>{{cite journal|doi=10.1002/j.1538-7305.1973.tb02007.x|title=Adaptive Quantization in Differential PCM Coding of Speech|year=1973|last1=Cummiskey|first1=P.|last2=Jayant|first2=N. S.|last3=Flanagan|first3=J. L.|journal=Bell System Technical Journal|volume=52|issue=7|pages=1105–1118}}</ref><ref>{{cite journal |last1=Cummiskey |first1=P. |last2=Jayant |first2=Nikil S. |last3=Flanagan |first3=J. L. |title=Adaptive quantization in differential PCM coding of speech |journal=The Bell System Technical Journal |date=1973 |volume=52 |issue=7 |pages=1105–1118 |doi=10.1002/j.1538-7305.1973.tb02007.x |issn=0005-8580}}</ref>

[[Perceptual coding]] was first used for [[speech coding]] compression, with [[linear predictive coding]] (LPC).<ref name="Schroeder2014">{{cite book |last1=Schroeder |first1=Manfred R. |title=Acoustics, Information, and Communication: Memorial Volume in Honor of Manfred R. Schroeder |date=2014 |publisher=Springer |isbn=9783319056609 |chapter=Bell Laboratories |page=388 |chapter-url=https://books.google.com/books?id=d9IkBAAAQBAJ&pg=PA388}}</ref> Initial concepts for LPC date back to the work of [[Fumitada Itakura]] ([[Nagoya University]]) and Shuzo Saito ([[Nippon Telegraph and Telephone]]) in 1966.<ref>{{cite journal |last1=Gray |first1=Robert M. |title=A History of Realtime Digital Speech on Packet Networks: Part II of Linear Predictive Coding and the Internet Protocol |journal=Found. Trends Signal Process. |date=2010 |volume=3 |issue=4 |pages=203–303 |doi=10.1561/2000000036 |url=https://ee.stanford.edu/~gray/lpcip.pdf |archive-url=https://web.archive.org/web/20100704113551/http://ee.stanford.edu/~gray/lpcip.pdf |archive-date=2010-07-04 |url-status=live |issn=1932-8346|doi-access=free }}</ref> During the 1970s, [[Bishnu S. Atal]] and [[Manfred R. Schroeder]] at [[Bell Labs]] developed a form of LPC called [[adaptive predictive coding]] (APC), a perceptual coding algorithm that exploited the masking properties of the human ear, followed in the early 1980s with the [[code-excited linear prediction]] (CELP) algorithm which achieved a significant [[data compression ratio|compression ratio]] for its time.<ref name="Schroeder2014"/> Perceptual coding is used by modern audio compression formats such as [[MP3]]<ref name="Schroeder2014"/> and [[Advanced Audio Codec|AAC]].

[[Discrete cosine transform]] (DCT), developed by [[N. Ahmed|Nasir Ahmed]], T. Natarajan and [[K. R. Rao]] in 1974,<ref name="DCT"/> provided the basis for the [[modified discrete cosine transform]] (MDCT) used by modern audio compression formats such as MP3,<ref name="Guckert">{{cite web |last1=Guckert |first1=John |title=The Use of FFT and MDCT in MP3 Audio Compression |url=http://www.math.utah.edu/~gustafso/s2012/2270/web-projects/Guckert-audio-compression-svd-mdct-MP3.pdf |archive-url=https://web.archive.org/web/20140124152337/http://www.math.utah.edu/~gustafso/s2012/2270/web-projects/Guckert-audio-compression-svd-mdct-MP3.pdf |archive-date=2014-01-24 |url-status=live |website=[[University of Utah]] |date=Spring 2012 |access-date=14 July 2019}}</ref> [[Dolby Digital]],<ref name="Luo">{{cite book |last1=Luo |first1=Fa-Long |title=Mobile Multimedia Broadcasting Standards: Technology and Practice |date=2008 |publisher=[[Springer Science & Business Media]] |isbn=9780387782638 |page=590 |url=https://books.google.com/books?id=l6PovWat8SMC&pg=PA590}}</ref><ref>{{cite journal |last1=Britanak |first1=V. |title=On Properties, Relations, and Simplified Implementation of Filter Banks in the Dolby Digital (Plus) AC-3 Audio Coding Standards |journal=IEEE Transactions on Audio, Speech, and Language Processing |date=2011 |volume=19 |issue=5 |pages=1231–1241 |doi=10.1109/TASL.2010.2087755|s2cid=897622 }}</ref> and AAC.<ref name=brandenburg>{{cite web|url=http://graphics.ethz.ch/teaching/mmcom12/slides/mp3_and_aac_brandenburg.pdf|title=MP3 and AAC Explained|last=Brandenburg|first=Karlheinz|year=1999|url-status=live|archive-url=https://web.archive.org/web/20170213191747/https://graphics.ethz.ch/teaching/mmcom12/slides/mp3_and_aac_brandenburg.pdf|archive-date=2017-02-13}}</ref> MDCT was proposed by J. P. Princen, A. W. Johnson and A. B. Bradley in 1987,<ref>{{cite book|doi=10.1109/ICASSP.1987.1169405|chapter=Subband/Transform coding using filter bank designs based on time domain aliasing cancellation|title=ICASSP '87. IEEE International Conference on Acoustics, Speech, and Signal Processing|year=1987|last1=Princen|first1=J.|last2=Johnson|first2=A.|last3=Bradley|first3=A.|volume=12|pages=2161–2164|s2cid=58446992}}</ref> following earlier work by Princen and Bradley in 1986.<ref>{{cite journal|doi=10.1109/TASSP.1986.1164954|title=Analysis/Synthesis filter bank design based on time domain aliasing cancellation|year=1986|last1=Princen|first1=J.|last2=Bradley|first2=A.|journal=IEEE Transactions on Acoustics, Speech, and Signal Processing|volume=34|issue=5|pages=1153–1161}}</ref>

The world's first commercial [[broadcast automation]] audio compression system was developed by Oscar Bonello, an engineering professor at the [[University of Buenos Aires]].
<ref>{{cite news|title=Ricardo Sametband, La Nación Newspaper "Historia de un pionero en audio digital" |url=https://www.lanacion.com.ar/tecnologia/la-historia-de-un-pionero-del-audio-digital-nid187775|language=es}}</ref>
In 1983, using the psychoacoustic principle of the masking of critical bands first published in 1967,<ref name="Zwicker"/> he started developing a practical application based on the recently developed [[IBM PC]] computer, and the broadcast automation system was launched in 1987 under the name [[Audicom]].
<ref name="Solidyne">{{cite web |title=Summary of some of Solidyne's contributions to Broadcast Engineering |url=http://www.solidynepro.com/nosotros-breve-historia/ |work=Brief History of Solidyne |publisher=Buenos Aires: Solidyne |access-date=6 March 2013  |archive-url=https://web.archive.org/web/20130308063719/http://www.solidynepro.com/indexahtmlp_Hist-ENG%2Ct.htm |archive-date=8 March 2013 }}</ref>
35 years later, almost all the radio stations in the world were using this technology manufactured by a number of companies because the inventor refuses to get invention patents for his work. He prefers declaring it of Public Domain publishing it
<ref>{{cite news|language=en|title=Anuncio del Audicom, AES Journal, July-August 1992, Vol 40, # 7/8, pag 647|url=http://www.aes.org/e-lib/browse.cfm?elib=19076}}<!-- auto-translated by Module:CS1 translator --></ref>

A literature compendium for a large variety of audio coding systems was published in the IEEE's ''Journal on Selected Areas in Communications'' (''JSAC''), in February 1988. While there were some papers from before that time, this collection documented an entire variety of finished, working audio coders, nearly all of them using perceptual techniques and some kind of frequency analysis and back-end noiseless coding.<ref name="Possibilities"/>

=== Video ===
{{see also|Video coding format|Video codec}}
[[Uncompressed video]] requires a very high [[Uncompressed video#Storage and Data Rates for Uncompressed Video|data rate]]. Although [[List of codecs#Lossless video compression|lossless video compression]] codecs perform at a compression factor of 5 to 12, a typical [[H.264/MPEG-4 AVC|H.264]] lossy compression video has a compression factor between 20 and 200.<ref name="MSU2007"/>

The two key video compression techniques used in [[video coding standards]] are the DCT and [[motion compensation]] (MC). Most video coding standards, such as the [[H.26x]] and [[MPEG]] formats, typically use motion-compensated DCT video coding (block motion compensation).<ref>{{cite book |last1=Chen |first1=Jie |last2=Koc |first2=Ut-Va |last3=Liu |first3=KJ Ray |title=Design of Digital Video Coding Systems: A Complete Compressed Domain Approach |date=2001 |publisher=[[CRC Press]] |isbn=9780203904183 |page=71 |url=https://books.google.com/books?id=LUzFKU3HeegC&pg=PA71}}</ref><ref name="Li">{{cite book |last1=Li |first1=Jian Ping |title=Proceedings of the International Computer Conference 2006 on Wavelet Active Media Technology and Information Processing: Chongqing, China, 29-31 August 2006 |date=2006 |publisher=[[World Scientific]] |isbn=9789812709998 |page=847 |url=https://books.google.com/books?id=FZiK3zXdK7sC&pg=PA847}}</ref>

Most video codecs are used alongside audio compression techniques to store the separate but complementary data streams as one combined package using so-called ''[[digital container format|container format]]s''.<ref name="CSIP"/>

==== Encoding theory ====
Video data may be represented as a series of still image frames. Such data usually contains abundant amounts of spatial and temporal [[redundancy (information theory)|redundancy]]. Video compression algorithms attempt to reduce redundancy and store information more compactly.

Most [[video compression formats]] and [[video codec|codecs]] exploit both spatial and temporal redundancy (e.g. through difference coding with [[motion compensation]]). Similarities can be encoded by only storing differences between e.g. temporally adjacent frames (inter-frame coding) or spatially adjacent pixels (intra-frame coding). [[inter frame|Inter-frame]] compression (a temporal [[delta encoding]]) (re)uses data from one or more earlier or later frames in a sequence to describe the current frame. [[Intra-frame coding]], on the other hand, uses only data from within the current frame, effectively being still-image compression.<ref name="faxin47"/>

The [[Video coding format#Intra-frame video coding formats|intra-frame video coding formats]] used in camcorders and video editing employ simpler compression that uses only intra-frame prediction. This simplifies video editing software, as it prevents a situation in which a compressed frame refers to data that the editor has deleted.

Usually, video compression additionally employs [[lossy compression]] techniques like [[quantization (image processing)|quantization]] that reduce aspects of the source data that are (more or less) irrelevant to the human visual perception by exploiting perceptual features of human vision. For example, small differences in color are more difficult to perceive than are changes in brightness. Compression algorithms can average a color across these similar areas in a manner similar to those used in JPEG image compression.<ref name="TomLane"/> As in all lossy compression, there is a [[trade-off]] between [[video quality]] and [[bit rate]], cost of processing the compression and decompression, and system requirements. Highly compressed video may present visible or distracting [[compression artifact|artifacts]].

Other methods other than the prevalent DCT-based transform formats, such as [[fractal compression]], [[matching pursuit]] and the use of a [[discrete wavelet transform]] (DWT), have been the subject of some research, but are typically not used in practical products. [[Wavelet compression]] is used in still-image coders and video coders without motion compensation. Interest in fractal compression seems to be waning, due to recent theoretical analysis showing a comparative lack of effectiveness of such methods.<ref name="faxin47"/>

===== Inter-frame coding =====
{{main|Inter frame}}
{{further|Motion compensation}}

In inter-frame coding, individual frames of a video sequence are compared from one frame to the next, and the [[video codec|video compression codec]] records the [[residual frame|differences]] to the reference frame. If the frame contains areas where nothing has moved, the system can simply issue a short command that copies that part of the previous frame into the next one. If sections of the frame move in a simple manner, the compressor can emit a (slightly longer) command that tells the decompressor to shift, rotate, lighten, or darken the copy. This longer command still remains much shorter than data generated by intra-frame compression. Usually, the encoder will also transmit a residue signal which describes the remaining more subtle differences to the reference imagery. Using entropy coding, these residue signals have a more compact representation than the full signal. In areas of video with more motion, the compression must encode more data to keep up with the larger number of pixels that are changing. Commonly during explosions, flames, flocks of animals, and in some panning shots, the high-frequency detail leads to quality decreases or to increases in the [[variable bitrate]].

==== Hybrid block-based transform formats ====
[[File:Hybrid video encoder processing stages.svg|thumb|upright=2|Processing stages of a typical video encoder]]

Many commonly used video compression methods (e.g., those in standards approved by the [[ITU-T]] or [[International Organization for Standardization|ISO]]) share the same basic architecture that dates back to [[H.261]] which was standardized in 1988 by the ITU-T. They mostly rely on the DCT, applied to rectangular blocks of neighboring pixels, and temporal prediction using [[motion vector]]s, as well as nowadays also an in-loop filtering step.

In the prediction stage, various [[data deduplication|deduplication]] and difference-coding techniques are applied that help decorrelate data and describe new data based on already transmitted data.

Then rectangular blocks of remaining [[pixel]] data are transformed to the frequency domain. In the main lossy processing stage, frequency domain data gets quantized in order to reduce information that is irrelevant to human visual perception.

In the last stage statistical redundancy gets largely eliminated by an [[entropy encoding|entropy coder]] which often applies some form of arithmetic coding.

In an additional in-loop filtering stage various filters can be applied to the reconstructed image signal. By computing these filters also inside the encoding loop they can help compression because they can be applied to reference material before it gets used in the prediction process and they can be guided using the original signal. The most popular example are [[deblocking filter]]s that blur out blocking artifacts from quantization discontinuities at transform block boundaries.

==== History ====
{{Main|Video coding format#History}}

In 1967, A.H. Robinson and C. Cherry proposed a [[run-length encoding]] bandwidth compression scheme for the transmission of analog television signals.<ref name="robinson">{{cite journal |author1-last=Robinson |author1-first=A. H. |author2-last=Cherry |author2-first=C. |title=Results of a prototype television bandwidth compression scheme |journal=[[Proceedings of the IEEE]] |publisher=[[IEEE]] |volume=55 |number=3 |date=1967 |pages=356–364 |doi=10.1109/PROC.1967.5493}}</ref> The DCT, which is fundamental to modern video compression,<ref name="Ghanbari"/> was introduced by [[N. Ahmed|Nasir Ahmed]], T. Natarajan and [[K. R. Rao]] in 1974.<ref name="DCT"/><ref name="patents"/>

[[H.261]], which debuted in 1988, commercially introduced the prevalent basic architecture of video compression technology.<ref name="history">{{Cite web|url=http://www.real.com/resources/digital-video-file-formats/|title=The History of Video File Formats Infographic — RealPlayer|date=22 April 2012}}</ref> It was the first [[video coding format]] based on DCT compression.<ref name="Ghanbari">{{cite book |last1=Ghanbari |first1=Mohammed |title=Standard Codecs: Image Compression to Advanced Video Coding |date=2003 |publisher=[[Institution of Engineering and Technology]] |isbn=9780852967102 |pages=1–2 |url=https://books.google.com/books?id=7XuU8T3ooOAC&pg=PA1}}</ref> H.261 was developed by a number of companies, including [[Hitachi]], [[PictureTel]], [[Nippon Telegraph and Telephone|NTT]], [[BT plc|BT]] and [[Toshiba]].<ref>{{cite web |title=Patent statement declaration registered as H261-07 |url=https://www.itu.int/net4/ipr/details_ps.aspx?sector=ITU-T&id=H261-07 |website=ITU |access-date=11 July 2019}}</ref>

The most popular [[video coding standard]]s used for codecs have been the [[MPEG]] standards. [[MPEG-1]] was developed by the [[Motion Picture Experts Group]] (MPEG) in 1991, and it was designed to compress [[VHS]]-quality video. It was succeeded in 1994 by [[MPEG-2]]/[[H.262/MPEG-2 Part 2|H.262]],<ref name="history"/> which was developed by a number of companies, primarily [[Sony]], [[Technicolor SA|Thomson]] and [[Mitsubishi Electric]].<ref name="mp2-patents">{{cite web |title=MPEG-2 Patent List |url=https://www.mpegla.com/wp-content/uploads/m2-att1.pdf |archive-url=https://web.archive.org/web/20190529164140/https://www.mpegla.com/wp-content/uploads/m2-att1.pdf |archive-date=2019-05-29 |url-status=live |website=[[MPEG LA]] |access-date=7 July 2019}}</ref> MPEG-2 became the standard video format for [[DVD]] and [[SD digital television]].<ref name="history"/> In 1999, it was followed by [[MPEG-4 Visual|MPEG-4]]/[[H.263]].<ref name="history"/> It was also developed by a number of companies, primarily Mitsubishi Electric, [[Hitachi]] and [[Panasonic]].<ref name="mp4-patents">{{cite web |title=MPEG-4 Visual - Patent List |url=https://www.mpegla.com/wp-content/uploads/m4v-att1.pdf |archive-url=https://web.archive.org/web/20190706184528/https://www.mpegla.com/wp-content/uploads/m4v-att1.pdf |archive-date=2019-07-06 |url-status=live |website=[[MPEG LA]] |access-date=6 July 2019}}</ref>

[[H.264/MPEG-4 AVC]] was developed in 2003 by a number of organizations, primarily Panasonic, [[Godo kaisha|Godo Kaisha IP Bridge]] and [[LG Electronics]].<ref name="avc-patents">{{cite web |title=AVC/H.264 {{ndash}} Patent List |url=https://www.mpegla.com/wp-content/uploads/avc-att1.pdf |website=MPEG LA |access-date=6 July 2019}}</ref> AVC commercially introduced the modern [[context-adaptive binary arithmetic coding]] (CABAC) and [[context-adaptive variable-length coding]] (CAVLC) algorithms. AVC is the main video encoding standard for [[Blu-ray Disc]]s, and is widely used by video sharing websites and streaming internet services such as [[YouTube]], [[Netflix]], [[Vimeo]], and [[iTunes Store]], web software such as [[Adobe Flash Player]] and [[Microsoft Silverlight]], and various [[HDTV]] broadcasts over terrestrial and satellite television.

===Genetics===
[[Compression of genomic sequencing data|Genetics compression algorithms]] are the latest generation of lossless algorithms that compress data (typically sequences of nucleotides) using both conventional compression algorithms and genetic algorithms adapted to the specific datatype. In 2012, a team of scientists from Johns Hopkins University published a genetic compression algorithm that does not use a reference genome for compression. HAPZIPPER was tailored for [[International HapMap Project|HapMap]] data and achieves over 20-fold compression (95% reduction in file size), providing 2- to 4-fold better compression and is less computationally intensive than the leading general-purpose compression utilities. For this, Chanda, Elhaik, and Bader introduced MAF-based encoding (MAFE), which reduces the heterogeneity of the dataset by sorting SNPs by their minor allele frequency, thus homogenizing the dataset.<ref name="HapZipper"/> Other algorithms developed in 2009 and 2013 (DNAZip and GenomeZip) have compression ratios of up to 1200-fold—allowing 6 billion basepair diploid human genomes to be stored in 2.5 megabytes (relative to a reference genome or averaged over many genomes).<ref name="genome email"/><ref name="genome contracts"/> For a benchmark in genetics/genomics data compressors, see <ref name="Morteza"/>

== Outlook and currently unused potential ==
It is estimated that the total amount of data that is stored on the world's storage devices could be further compressed with existing compression algorithms by a remaining average factor of 4.5:1.<ref>{{Cite web|url=https://infoscience.epfl.ch/record/188645/files/06742961.pdf|title=Data Compression via Logic Synthesis}}</ref> It is estimated that the combined technological capacity of the world to store information provides 1,300 [[exabytes]] of hardware digits in 2007, but when the corresponding content is optimally compressed, this only represents 295 exabytes of [[Shannon information]].<ref name="World Capacity"/>

== See also ==
{{div col|colwidth=20em}}
* [[HTTP compression]]
* [[Kolmogorov complexity]]
* [[Minimum description length]]
* [[Modulo-N code]]
* [[Motion coding]]
* [[Range coding]]
* [[Set redundancy compression]]
* [[Sub-band coding]]
* [[Universal code (data compression)]]
* [[Vector quantization]]
{{div col end}}

== References ==
{{reflist|refs=
<ref name="Wade">{{cite book
| last       = Wade
| first      = Graham
| title      = Signal coding and processing
| url        = https://books.google.com/books?id=CJswCy7_W8YC
| access-date = 2011-12-22
| year       = 1994
| edition    = 2
| publisher  = Cambridge University Press
| isbn       = 978-0-521-42336-6
| page       = 34
| quote      = The broad objective of source coding is to exploit or remove 'inefficient' redundancy in the [[Pulse-code modulation|PCM]] source and thereby achieve a reduction in the overall source rate R.
}}</ref>

<ref name="mahdi53">{{cite journal|last=Mahdi|first=O.A.|author2=Mohammed, M.A. |author3=Mohamed, A.J. |title=Implementing a Novel Approach an Convert Audio Compression to Text Coding via Hybrid Technique|journal=International Journal of Computer Science Issues|date=November 2012|volume=9|issue=6, No. 3|pages=53–59|url=http://ijcsi.org/papers/IJCSI-9-6-3-53-59.pdf |archive-url=https://web.archive.org/web/20130320103924/http://ijcsi.org/papers/IJCSI-9-6-3-53-59.pdf |archive-date=2013-03-20 |url-status=live|access-date=6 March 2013}}</ref>

<ref name="PujarKadlaskar">{{cite journal|last=Pujar|first=J.H.|author2=Kadlaskar, L.M.|title=A New Lossless Method of Image Compression and Decompression Using Huffman Coding Techniques|journal=Journal of Theoretical and Applied Information Technology|date=May 2010|volume=15|issue=1|pages=18–23|url=http://www.jatit.org/volumes/research-papers/Vol15No1/3Vol15No1.pdf |archive-url=https://web.archive.org/web/20100524105217/http://www.jatit.org/volumes/research-papers/Vol15No1/3Vol15No1.pdf |archive-date=2010-05-24 |url-status=live}}</ref>

<ref name="Salomon">{{cite book |last=Salomon |first=David |title=A Concise Introduction to Data Compression |year=2008 |publisher=Springer |location=Berlin |isbn=9781848000728}}</ref>

<ref name="Tank">{{cite book |last=Tank |first=M.K. |title=Thinkquest 2010: Proceedings of the First International Conference on Contours of Computing Technology |year=2011 |publisher=Springer |location=Berlin |pages=275–283|doi=10.1007/978-81-8489-989-4_51 |chapter=Implementation of Lempel-ZIV algorithm for lossless compression using VHDL |isbn=978-81-8489-988-7 }}</ref>

<ref name="Optimized LZW">{{cite journal|last=Navqi|first=Saud|author2=Naqvi, R. |author3=Riaz, R.A. |author4= Siddiqui, F. |title=Optimized RTL design and implementation of LZW algorithm for high bandwidth applications|journal=Electrical Review|date=April 2011|volume=2011|issue=4|pages=279–285|url=http://pe.org.pl/articles/2011/4/68.pdf |archive-url=https://web.archive.org/web/20130520105146/http://pe.org.pl/articles/2011/4/68.pdf |archive-date=2013-05-20 |url-status=live}}</ref>

<ref name="Wolfram">{{cite book|last=Wolfram|first=Stephen|title=A New Kind of Science|publisher=Wolfram Media, Inc.|year=2002|page=[https://archive.org/details/newkindofscience00wolf/page/1069 1069]|isbn=978-1-57955-008-0|url-access=registration|url=https://archive.org/details/newkindofscience00wolf/page/1069}}</ref>

<ref name="mahmud2">{{cite journal|last=Mahmud|first=Salauddin|title=An Improved Data Compression Method for General Data|journal=International Journal of Scientific & Engineering Research|date=March 2012|volume=3|issue=3|page=2|url=http://www.ijser.org/researchpaper%5CAn-Improved-Data-Compression-Method-for-General-Data.pdf |archive-url=https://web.archive.org/web/20131102022116/http://www.ijser.org/researchpaper%5CAn-Improved-Data-Compression-Method-for-General-Data.pdf |archive-date=2013-11-02 |url-status=live|access-date=6 March 2013}}</ref>

<ref name=TomLane>{{cite web|last=Lane|first=Tom|title=JPEG Image Compression FAQ, Part 1|url=http://www.faqs.org/faqs/jpeg-faq/part1/|work=Internet FAQ Archives|publisher=Independent JPEG Group|access-date=6 March 2013}}</ref>

<ref name="HEVC">{{cite journal|title=Overview of the High Efficiency Video Coding (HEVC) Standard |author=G. J. Sullivan |author2=J.-R. Ohm |author3=W.-J. Han |author4-link=Thomas Wiegand |author4=T. Wiegand |journal=IEEE Transactions on Circuits and Systems for Video Technology |publisher=[[IEEE]] |volume=22 |issue=12 |pages=1649–1668 |date=December 2012 |author-link=Gary Sullivan (engineer) |doi=10.1109/TCSVT.2012.2221191 |s2cid=64404 |doi-access= }}</ref>

<ref name="Arcangel">{{cite web|last=Arcangel|first=Cory|title=On Compression|url=http://www.coryarcangel.com/downloads/Cory-Arcangel-OnC.pdf |archive-url=https://web.archive.org/web/20130728082920/http://www.coryarcangel.com/downloads/Cory-Arcangel-OnC.pdf |archive-date=2013-07-28 |url-status=live|access-date=6 March 2013}}</ref>

<ref name="Marak">{{cite web|last=Marak|first=Laszlo|title=On image compression|url=http://www.ujoimro.com/resources/Laszlo_Marak_image_compression.pdf|publisher=University of Marne la Vallee|access-date=6 March 2013|archive-url=https://web.archive.org/web/20150528012028/http://www.ujoimro.com/resources/Laszlo_Marak_image_compression.pdf|archive-date=28 May 2015|url-status=dead|df=dmy-all}}</ref>

<ref name="Mahoney">{{cite web|last=Mahoney|first=Matt|title=Rationale for a Large Text Compression Benchmark|url=http://cs.fit.edu/~mmahoney/compression/rationale.html|publisher=Florida Institute of Technology|access-date=5 March 2013}}</ref>

<ref name="Market Efficiency">{{cite journal|author1=Shmilovici A. |author2=Kahiri Y. |author3=Ben-Gal I. |author4=Hauser S. |title= Measuring the Efficiency of the Intraday Forex Market with a Universal Data Compression Algorithm|url= http://www.eng.tau.ac.il/~bengal/28.pdf |archive-url=https://web.archive.org/web/20090709143601/http://www.eng.tau.ac.il/~bengal/28.pdf |archive-date=2009-07-09 |url-status=live|journal= Computational Economics|volume= 33|issue= 2|pages= 131–154|year= 2009 |doi=10.1007/s10614-008-9153-3|citeseerx=10.1.1.627.3751 |s2cid=17234503 }}</ref>

<ref name="Ben-Gal">{{cite journal|author= I. Ben-Gal|title= On the Use of Data Compression Measures to Analyze Robust Designs|url = http://www.eng.tau.ac.il/~bengal/Journal%20Paper.pdf|journal=IEEE Transactions on Reliability|volume= 54|issue= 3|pages= 381–388|year= 2008|doi= 10.1109/TR.2005.853280|s2cid= 9376086}}</ref>

<ref name="ScullyBrodley">{{Cite book|author1=D. Scully|author2=Carla E. Brodley|title=Data Compression Conference (DCC'06) |chapter=Compression and Machine Learning: A New Perspective on Feature Space Vectors |s2cid=12311412|author2-link=Carla Brodley|date=2006|page=332|doi=10.1109/DCC.2006.13|isbn=0-7695-2545-8}}</ref>

<ref name="RFC 3284">{{cite web|last=Korn|first=D.|title=RFC 3284: The VCDIFF Generic Differencing and Compression Data Format|date=July 2002 |url=http://tools.ietf.org/html/rfc3284|publisher=Internet Engineering Task Force|access-date=5 March 2013|display-authors=etal}}</ref>

<ref name="Vdelta">{{cite book| first1=D.G. | last1 = Korn | first2 = K.P. | last2=Vo |title=Vdelta: Differencing and Compression | series=Practical Reusable Unix Software | editor = B. Krishnamurthy | location=New York | publisher=John Wiley & Sons, Inc.| year = 1995}}</ref>

<ref name="Olympus WS-120">The Olympus WS-120 digital speech recorder, according to its manual, can store about 178 hours of speech-quality audio in .WMA format in 500 MB of flash memory.</ref>

<ref name="FLAC comparison">{{cite web|last=Coalson|first=Josh|title=FLAC Comparison|url=https://xiph.org/flac/comparison.html |access-date=2020-08-23}}</ref>

<ref name="FLAC overview">{{cite web |url=https://xiph.org/flac/documentation_format_overview.html |title=Format overview |access-date=2020-08-23}}</ref>

<ref name="Jaiswal">{{cite book|last=Jaiswal|first=R.C.|title=Audio-Video Engineering|year=2009|publisher=Nirali Prakashan |location=Pune, Maharashtra|isbn=9788190639675|page=3.41}}</ref>

<ref name="faxin47">{{cite book|author1=Faxin Yu |author2=Hao Luo |author3=Zheming Lu |title=Three-Dimensional Model Analysis and Processing|url=https://archive.org/details/threedimensional00yufa |url-access=limited |year=2010|publisher=Springer|location=Berlin|isbn=9783642126512|page=[https://archive.org/details/threedimensional00yufa/page/n62 47]}}</ref>

<ref name="Possibilities">{{cite web|title=File Compression Possibilities|url=https://www.gadgetcouncil.com/compress-1GB-files-into-10-mb/|work=A Brief guide to compress a file in 4 different ways|date=17 February 2017}}</ref>

<ref name="Zwicker">{{cite book|last=Zwicker|first=Eberhard|title=The Ear As A Communication Receiver|year=1967|publisher=Acoustical Society of America|location=Melville, NY|url=http://asa.aip.org/books/ear.html|display-authors=etal|access-date=2011-11-11|archive-url=https://web.archive.org/web/20000914080525/http://asa.aip.org/books/ear.html|archive-date=2000-09-14|url-status=dead}}</ref>

<ref name="CSIP">{{cite web|title=Video Coding|url=http://csip.ece.gatech.edu/drupal7/?q=technical-area/video-coding|work=CSIP website|publisher=Center for Signal and Information Processing, Georgia Institute of Technology|access-date=6 March 2013|archive-url=https://web.archive.org/web/20130523194345/http://csip.ece.gatech.edu/drupal7/?q=technical-area%2Fvideo-coding|archive-date=23 May 2013|url-status=dead|df=dmy-all}}</ref>

<ref name="MSU2007">{{cite report|author= Dmitriy Vatolin |collaboration=Graphics & Media Lab Video Group|title=Lossless Video Codecs Comparison '2007|date=March 2007|publisher=Moscow State University |url=http://compression.ru/video/codec_comparison/pdf/msu_lossless_codecs_comparison_2007_eng.pdf |archive-url=https://web.archive.org/web/20080515091507/http://www.compression.ru/video/codec_comparison/pdf/msu_lossless_codecs_comparison_2007_eng.pdf |archive-date=2008-05-15 |url-status=live}}</ref>

<ref name="DCT">{{cite journal |author1=Nasir Ahmed |author1-link=N. Ahmed |author2=T. Natarajan |author3=Kamisetty Ramamohan Rao |journal=IEEE Transactions on Computers|title=Discrete Cosine Transform|volume=C-23|issue=1|pages=90–93|date=January 1974 |doi=10.1109/T-C.1974.223784 |s2cid=149806273 |url=https://www.ic.tu-berlin.de/fileadmin/fg121/Source-Coding_WS12/selected-readings/Ahmed_et_al.__1974.pdf |archive-url=https://web.archive.org/web/20161208075733/https://www.ic.tu-berlin.de/fileadmin/fg121/Source-Coding_WS12/selected-readings/Ahmed_et_al.__1974.pdf |archive-date=2016-12-08 |url-status=live
}}</ref>

<ref name="DPCM">{{US patent reference|inventor=C. Chapin Cutler|title=Differential Quantization of Communication Signals|number=2605361|A-Datum=1950-06-29|issue-date=1952-07-29}}</ref>

<ref name="Shannon">{{cite journal|author1=Claude Elwood Shannon|editor-surname1= Alcatel-Lucent|journal=Bell System Technical Journal|title=A Mathematical Theory of Communication |volume=27 |issue=3–4 |date=1948 |pages=379–423, 623–656 |doi= 10.1002/j.1538-7305.1948.tb01338.x|hdl= 11858/00-001M-0000-002C-4314-2|url=http://www.math.harvard.edu/~ctm/home/text/others/shannon/entropy/entropy.pdf |archive-url=https://web.archive.org/web/20110524064232/http://math.harvard.edu/~ctm/home/text/others/shannon/entropy/entropy.pdf |archive-date=2011-05-24 |url-status=live |access-date=2019-04-21
|author1-link= Claude Elwood Shannon|hdl-access=free}}</ref>

<ref name="Huffman">{{citation|surname1=[[David Albert Huffman]]|periodical=[[Proceedings of the IRE]]|title=A method for the construction of minimum-redundancy codes|volume=40|issue=9|pages=1098–1101|date=September 1952 |doi=10.1109/JRPROC.1952.273898 |url=http://compression.ru/download/articles/huff/huffman_1952_minimum-redundancy-codes.pdf |archive-url=https://web.archive.org/web/20051008115257/http://compression.ru/download/articles/huff/huffman_1952_minimum-redundancy-codes.pdf |archive-date=2005-10-08 |url-status=live
}}</ref>

<ref name="JPEG">{{citation|surname1=CCITT Study Group VIII und die Joint Photographic Experts Group (JPEG) von ISO/IEC Joint Technical Committee 1/Subcommittee 29/Working Group 10|title=Recommendation T.81: Digital Compression and Coding of Continuous-tone Still images – Requirements and guidelines|pages=54 ff|contribution=Annex D – Arithmetic coding|date=1993 |url=https://www.w3.org/Graphics/JPEG/itu-t81.pdf |access-date=2009-11-07
}}</ref>

<ref name="Hadamard">{{cite journal|doi=10.1109/PROC.1969.6869|title=Hadamard transform image coding|year=1969|last1=Pratt|first1=W.K.|last2=Kane|first2=J.|last3=Andrews|first3=H.C.|journal=Proceedings of the IEEE|volume=57|pages=58–68}}</ref>

<ref name="t81">{{cite web |title=T.81 – DIGITAL COMPRESSION AND CODING OF CONTINUOUS-TONE STILL IMAGES – REQUIREMENTS AND GUIDELINES |url=https://www.w3.org/Graphics/JPEG/itu-t81.pdf |publisher=[[CCITT]] |date=September 1992 |access-date=12 July 2019}}</ref>

<ref name="patents">{{cite conference |first=Cliff |last=Reader |publisher=Society of Photo-Optical Instrumentation Engineers |book-title=Applications of Digital Image Processing XXXIX |title=Patent landscape for royalty-free video coding |series=Applications of Digital Image Processing XXXIX |volume=9971 |pages=99711B |location=San Diego, California |date=2016-08-31 |url=https://www.youtube.com/watch?v=wi1BefrfTos | archive-url=https://web.archive.org/web/20161208075738/https://www.youtube.com/watch?v=wi1BefrfTos| archive-date=2016-12-08 | url-status=dead|bibcode=2016SPIE.9971E..1BR |doi= 10.1117/12.2239493 |editor-last=Tescher |editor-first=Andrew G}} Lecture recording, from 3:05:10.</ref>

<ref name="HapZipper">{{cite journal|vauthors=Chanda P, Bader JS, Elhaik E| title=HapZipper: sharing HapMap populations just got easier|journal=Nucleic Acids Research|date=27 Jul 2012 |volume=40 |issue=20 |page=e159 |doi=10.1093/nar/gks709 |url= | pmid=22844100 |pmc=3488212}}</ref>

<ref name="genome email">{{cite journal | journal=Bioinformatics | date=Jan 15, 2009 | volume=25 |issue=2 | pages=274–5| title=Human genomes as email attachments |vauthors=Christley S, Lu Y, Li C, Xie X| pmid=18996942 | doi=10.1093/bioinformatics/btn582| doi-access=free }}</ref>

<ref name="genome contracts">{{cite journal | journal= Bioinformatics |date=September 2013 | volume=29 |issue=17 | pages=2199–202 | title=The human genome contracts again |vauthors=Pavlichin DS, Weissman T, Yona G | pmid=23793748 | doi=10.1093/bioinformatics/btt362 | doi-access=free }}</ref>

<ref name="Morteza">{{cite journal|doi=10.3390/info7040056|doi-access=free|title=A Survey on Data Compression Methods for Biological Sequences|year=2016|last1=Hosseini|first1=Morteza|last2=Pratas|first2=Diogo|last3=Pinho|first3=Armando|journal=Information|volume=7|issue=4|page=56}}</ref>

<ref name="World Capacity">{{cite journal|author1=Hilbert, Martin|author2=López, Priscila|title=The World's Technological Capacity to Store, Communicate, and Compute Information|journal=Science|date=1 April 2011|volume=332|issue=6025|pages=60–65|doi=10.1126/science.1200970|pmid=21310967|bibcode=2011Sci...332...60H|s2cid=206531385|doi-access=free}}</ref>

<ref name="Hoffman">{{cite book |last1=Hoffman |first1=Roy |title=Data Compression in Digital Systems |date=2012 |publisher=[[Springer Science & Business Media]] |isbn=9781461560319 |page=124 |url=https://books.google.com/books?id=FOfTBwAAQBAJ |quote=Basically, wavelet coding is a variant on DCT-based transform coding that reduces or eliminates some of its limitations. (...) Another advantage is that rather than working with 8 × 8 blocks of pixels, as do JPEG and other block-based DCT techniques, wavelet coding can simultaneously compress the entire image.}}</ref>

<ref name="Unser">{{cite journal |last1=Unser |first1=M. |last2=Blu |first2=T. |s2cid=2765169 |title=Mathematical properties of the JPEG2000 wavelet filters |journal=IEEE Transactions on Image Processing |date=2003 |volume=12 |issue=9 |pages=1080–1090 |doi=10.1109/TIP.2003.812329 |pmid=18237979 |bibcode=2003ITIP...12.1080U |url=http://infoscience.epfl.ch/record/63104 }}</ref>
}}

== External links ==
* {{citation |chapter-url=http://dvd-hq.info/data_compression_3.php |title=Data Compression Basics |chapter=Part 3: Video compression}}
* {{citation |url=http://extranet.ateme.com/download.php?file=1114 |archive-url=https://web.archive.org/web/20090905092232/http://extranet.ateme.com/download.php?file=1114 |archive-date=2009-09-05 |author=Pierre Larbier |title=Using 10-bit AVC/H.264 Encoding with 4:2:2 for Broadcast Contribution |publisher=Ateme}}
* {{Webarchive|url=https://web.archive.org/web/20170830224011/http://extranet.ateme.com/download.php?file=1194 |date=2017-08-30 |title=Why does 10-bit save bandwidth (even when content is 8-bit)?}}
* {{Webarchive|url=https://web.archive.org/web/20170830224021/http://extranet.ateme.com/download.php?file=1196 |date=2017-08-30 |title=Which compression technology should be used?}}
* {{citation |url=http://media.wiley.com/product_data/excerpt/99/04705184/0470518499.pdf |archive-url=https://web.archive.org/web/20070928023157/http://media.wiley.com/product_data/excerpt/99/04705184/0470518499.pdf |archive-date=2007-09-28 |url-status=live |publisher=Wiley |title=Introduction to Compression Theory}}
* [http://tech.ebu.ch/docs/tech/tech3296.pdf EBU subjective listening tests on low-bitrate audio codecs]
* [http://techgage.com/article/audio_archiving_guide_part_1_-_music_formats/ Audio Archiving Guide: Music Formats] (Guide for helping a user pick out the right codec)
* {{webarchive |url=https://web.archive.org/web/20070928023157/http://mia.ece.uic.edu/~papers/WWW/MultimediaStandards/chapter7.pdf |archive-url=https://web.archive.org/web/20040408044944/http://mia.ece.uic.edu/~papers/WWW/MultimediaStandards/chapter7.pdf |archive-date=2004-04-08 |url-status=live |date=September 28, 2007 |title=MPEG 1&2 video compression intro (pdf format) }}
* [http://wiki.hydrogenaud.io/index.php?title=Lossless_comparison hydrogenaudio wiki comparison]
* [https://www.cs.cmu.edu/afs/cs/project/pscico-guyb/realworld/www/compression.pdf Introduction to Data Compression] by Guy E Blelloch from [[Carnegie Mellon University|CMU]]
* [http://www.monkeysaudio.com/theory.html Explanation of lossless signal compression method used by most codecs]
* {{Webarchive|url=https://web.archive.org/web/20100315021124/http://www.videsignline.com/howto/showArticle.jhtml?articleID=185301351 |date=2010-03-15 |title=Videsignline – Intro to Video Compression}}
* {{webarchive |url=https://web.archive.org/web/20130527124650/http://public.dhe.ibm.com/common/ssi/ecm/en/tsu12345usen/TSU12345USEN.PDF |archive-url=https://web.archive.org/web/20130527124650/http://public.dhe.ibm.com/common/ssi/ecm/en/tsu12345usen/TSU12345USEN.PDF |archive-date=2013-05-27 |url-status=live |title=Data Footprint Reduction Technology}}
* [http://siliconmentor.blogspot.in/2014/12/what-is-run-length-coding-in-video.html What is Run length Coding in video compression]

{{Compression Methods}}
{{Compression formats}}
{{Compression Software Implementations}}
{{data}}
{{Computer files}}

{{Authority control}}

[[Category:Data compression| ]]
[[Category:Digital audio]]
[[Category:Digital television]]
[[Category:Film and video technology]]
[[Category:Video compression]]
[[Category:Videotelephony]]
[[Category:Utility software types]]